set nocompatible

" Airline configuration.
" Airline isn't so good using unpatched console fonts.  Only enable Airline
" when GUI mode is running.
let g:pathogen_disabled = []
if ! has("gui_running")
	call add(g:pathogen_disabled, 'vim-airline')
else
	call add(g:pathogen_disabled, 'vim-airline')
	"let g:airline_powerline_fonts = 1
	"let g:airline#extensions#tabline#enabled = 1
	"let g:airline#extensions#tabline#fnamemod = ':t'
	"set laststatus=2
endif

" The font specification seems to be a wee bit different for MacVim vs gvim
" on Ubuntu.
" Fonts I like: Fira Mone, IBM Plex
if has("gui_macvim")
	"set guifont=Fira\ Mono\ for\ Powerline:h12
	set guifont=IBM\ Plex\ Mono:h14
else
	"set guifont=Fira\ Mono\ for\ Powerline\ 12
	set guifont=IBM\ Plex\ Mono\ 12
endif

set autoindent
set ruler
filetype plugin on

execute pathogen#infect()

function StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfun


set ignorecase
set smartcase
" This one got me...if you use a 'g' for a find/replace command, this will
" toggle the global setting.  So, since it's on by default, putting a 'g'
" (such as :%/old/new/g) will only find/replace first occurance on a line.
set gdefault
set incsearch
set showmatch
set hlsearch
nnoremap <leader><space> :noh<cr>

set number
set cursorline


set formatoptions=crqlj         " t - autowrap to textwidth
                                " c - autowrap comments to textwidth
                                " r - autoinsert comment leader with <Enter>
                                " q - allow formatting of comments with :gq
                                " l - don't format already long lines


if has("autocmd")
  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on
  " ...
endif

" --- Key Mappings ---
" Move to next or previous tab using standard Mac key bindings.
" I don't think these work like you think they do...already mapped by OS X
" noremap <C-Tab>:    tabnext<CR>
" noremap <C-S-Tab>:  tabprev<CR>

"
" Buffer management bindings
"
nnoremap <leader>p :b#<CR>
nnoremap <leader>q :bp<bar>sp<bar>bn<bar>bd<CR>
nnoremap <leader>o :buffers<CR>:buffer<Space>

nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

nnoremap <C-\> :vsplit<CR>

" Insert closing brace when an open brace is followed by CR.  Won't insert
" closing brace if no CR.
inoremap {<CR> {<CR>}<Esc>k$a

inoremap jj <Esc>


" --- File Type Setup ---
autocmd FileType html,css,js,less setl tw=80 expandtab shiftwidth=2 softtabstop=2

" Override default Modula 'md' extension to Markddown.
autocmd BufNewFile,BufReadPost *.md set filetype=markdown

" Setup default color scheme
if has("gui_running")
	colorscheme apprentice
	"set bg=dark
else
	colorscheme dracula 
endif

syntax on

" 
" Set the vertical split character to something that looks a little better
" than the default pipe.
"
set fillchars+=vert:┋ 

"
" Set the characters for showing hard tabs.
"
set listchars=tab:▸·
set list

set autochdir

" Nerd Tree setup
" let NERDTreeChDirMode=2
let NERDTreeDirArrows=1

" autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" Ctags setup
set tags=tags;/

" Run .vimrc from where vim is launched to load project-specific settings.
" The secure is there to prevent accidentally loading a vim script that does
" bad things.
set exrc
set secure

" No you don't have to press shift key :) 
nnoremap ; :

" Awesome script by Damian Conway; lets you move visual blocks of code around
" with Shift-ArrowKey.  
vmap  <expr>  <S-LEFT>   DVB_Drag('left')
vmap  <expr>  <S-RIGHT>  DVB_Drag('right')
vmap  <expr>  <S-DOWN>   DVB_Drag('down')
vmap  <expr>  <S-UP>     DVB_Drag('up')
let g:DVB_TrimWS = 1

" Also from Damian Conway; toggle comments for blocks of code.
nmap     <silent> <leader>/ :call ToggleComment()<CR><CR>0
xnoremap <silent> <leader>/ :call ToggleCommentV()<CR>

set wildmenu
